Join the 3 schema:
WITH CTE AS
(SELECT s.*, men.product_name, men.price, mem.join_date
 FROM sales AS s
 FULL OUTER JOIN menu AS men
 ON s.product_id = men.product_id
 FULL OUTER JOIN members AS mem
 ON s.customer_id = mem.customer_id
ORDER BY customer_id, order_date)

Q5. Which item was the most popular for each customer?
SELECT customer_id, product_name, no_purchase
FROM
(
SELECT customer_id, product_name, COUNT(product_name) AS no_purchase,
dense_rank() OVER( PARTITION BY customer_id ORDER BY COUNT(product_name) DESC) AS rank
FROM CTE
GROUP BY customer_id, product_name
) ppt
WHERE rank = 1;

Q6. Which item was purchased first by the customer after they became a member?
SELECT customer_id, product_name
FROM
(
SELECT customer_id, product_name, 
dense_rank() OVER(PARTITION BY customer_id ORDER BY order_date) AS order_sequence
FROM CTE
WHERE order_date > join_date 
 ) temp
WHERE order_sequence = 1
;

Q7. Which item was purchased just before the customer became a member?
SELECT customer_id, product_name
FROM
(
SELECT customer_id, product_name, 
dense_rank() OVER(PARTITION BY customer_id ORDER BY order_date DESC) AS order_sequence
FROM CTE
WHERE order_date < join_date 
 ) temp
WHERE order_sequence = 1
;

Q8. What is the total items and amount spent for each member before they became a member?
SELECT customer_id, SUM(total_items), SUM(total_spend)
FROM
(
SELECT customer_id, product_name, COUNT(*) AS total_items, COUNT(product_id) * price AS total_spend
FROM CTE
WHERE order_date < join_date 
GROUP BY customer_id, product_name, price
ORDER BY customer_id
  ) temp
GROUP BY customer_id;

Updated Ver:
SELECT customer_id, COUNT(product_id), SUM(price)
FROM CTE
WHERE order_date < join_date
GROUP BY customer_id;

Q9. If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
SELECT customer_id, SUM(points_earned)
FROM
(
SELECT customer_id, SUM(price),
CASE
	WHEN product_id IN (2,3) THEN 10*SUM(price)
    WHEN product_id IN (1) THEN 2*10*SUM(price)
END AS points_earned
FROM CTE
GROUP BY customer_id, product_id
ORDER BY 1
  ) AS temp
GROUP BY customer_id
;

SELECT customer_id, SUM(price),
SUM(
  CASE
	WHEN product_id IN (2,3) THEN 10 *price
    WHEN product_id IN (1) THEN 2*10*price
END) AS points_earned
FROM CTE
GROUP BY 1
ORDER BY 1
;

Q10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?

SELECT customer_id,
SUM(CASE
	WHEN product_id = 1 THEN 2*10*price
    WHEN product_id IN (2,3) AND order_date BETWEEN join_date AND join_date + INTERVAL '7 days' THEN 2*10*price
    ELSE 10* price
END)
FROM CTE
WHERE customer_id IN ('A', 'B')
GROUP BY 1
;

SELECT customer_id,
       SUM(
           CASE 
               WHEN (
                   (order_date - join_date BETWEEN 0 AND 6)
                   OR (product_name = 'sushi')
               ) THEN 20 * price
               ELSE 10 * price
           END
       ) AS total_points
FROM cte
WHERE order_date < '2021-02-01'
  AND customer_id != 'C'
GROUP BY customer_id
ORDER BY customer_id;

Additional Q
SELECT customer_id, order_date, product_name, price, member,
CASE
	WHEN member = 'Y' THEN dense_rank() OVER(PARTITION BY customer_id, member ORDER BY order_date)
    ELSE NULL
END
FROM
(
SELECT customer_id, order_date,  product_name, price,
CASE
	WHEN order_date >= join_date THEN 'Y'
    ELSE 'N'
END AS member
FROM CTE 
  ) temp;

Note
Q8 no need multiply uan with price, just sum of price, same to Q1
Q9 on the sequencce on coding
