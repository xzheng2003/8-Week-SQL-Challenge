1. Data Cleansing Steps
In a single query, perform the following operations and generate a new table in the data_mart schema named clean_weekly_sales:

1. Convert the week_date to a DATE format
2. Add a week_number as the second column for each week_date value, for example any value from the 1st of January to 7th of January will be 1, 8th to 14th will be 2 etc
3. Add a month_number with the calendar month for each week_date value as the 3rd column
4. Add a calendar_year column as the 4th column containing either 2018, 2019 or 2020 values
5. Add a new column called age_band after the original segment column using the following mapping on the number inside the segment value
segment	age_band
1	Young Adults
2	Middle Aged
3 or 4	Retirees
6. Add a new demographic column using the following mapping for the first letter in the segment values:
segment	demographic
C	Couples
F	Families
7. Ensure all null string values with an "unknown" string value in the original segment column as well as the new age_band and demographic columns
8. Generate a new avg_transaction column as the sales value divided by transactions rounded to 2 decimal places for each record

WITH CTE AS 
(SELECT to_date(week_date, 'dd/mm/yy') AS week_date,
 EXTRACT (week FROM to_date(week_date, 'dd/mm/yy')) AS week_number,
 EXTRACT (month FROM to_date(week_date, 'dd/mm/yy')) AS month_number,
 EXTRACT (year FROM to_date(week_date, 'dd/mm/yy')) AS calender_year, region, platform, customer_type,
 CASE
 WHEN segment LIKE '_1' THEN 'Young Adults'
 WHEN segment LIKE '_2' THEN 'Middle Aged'
 WHEN segment LIKE '_3' OR segment LIKE '_4' THEN 'Retirees'
 ELSE 'unknown'
 END AS age_band,
 CASE
 WHEN segment LIKE '_C' THEN 'Couples'
 WHEN segment LIKE '_F' THEN 'Families'
 ELSE 'unknown'
 END AS demographic,
 transactions, sales,
 ROUND(1.0*sales/transactions,2) AS avg_tansactions
FROM data_mart.weekly_sales)

SELECT *
FROM CTE
;

2. Data Exploration
1. What day of the week is used for each week_date value?

SELECT DISTINCT(to_char(week_date, 'Day')) AS day_of_week
FROM CTE
;

2. What range of week numbers are missing from the dataset?

,
CTE2 AS (SELECT generate_series(1,52) AS missing_week)

SELECT missing_week
FROM CTE2
WHERE missing_week
NOT IN (SELECT DISTINCT(week_number)
FROM CTE)
ORDER BY 1
;

3. How many total transactions were there for each year in the dataset?

SELECT calender_year, SUM(transactions)
FROM CTE
GROUP BY 1
ORDER BY 1
;

4. What is the total sales for each region for each month?

SELECT region, month_number, SUM(sales) AS total_sales
FROM CTE
GROUP BY 1,2
ORDER BY 1,2
;

5. What is the total count of transactions for each platform

SELECT platform, SUM(transactions)
FROM CTE
GROUP BY 1
ORDER BY 1
;

6. What is the percentage of sales for Retail vs Shopify for each month?

SELECT month_number,
ROUND(100.0*retail_sales/(retail_sales+shopify_sales),2) AS retail_percentage,
ROUND(100.0*shopify_sales/(retail_sales+shopify_sales),2) AS shopify_percentage
FROM
(
SELECT month_number,
SUM(CASE
	WHEN platform = 'Retail' THEN sales
END) AS retail_sales,
SUM(CASE
	WHEN platform = 'Shopify' THEN sales
END) AS shopify_sales
FROM CTE
GROUP BY 1
ORDER BY 1
  ) temp
;

7. What is the percentage of sales by demographic for each year in the dataset?
8. Which age_band and demographic values contribute the most to Retail sales?
9. Can we use the avg_transaction column to find the average transaction size for each year for Retail vs Shopify? If not - how would you calculate it instead?
